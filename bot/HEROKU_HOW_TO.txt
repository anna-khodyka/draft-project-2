Инструкция по запуску FLASK приложения на HEROKU:

Сразу договоримся, что используем web-интерфейс HEROKU для наглядности того, что делаем.


1. Основой приложения на Heroku будет репозиторий на GitHub. Создаем репозитарий так, 
чтобы наше приложение находилось в его корневой папке.

Примеры:

Неправильно

FLASK-PROJECT (имя репозитория)         |
\                                       | 
 BOT (корневой каталог репозитория)     | 
  \                                     |
   - TEMPLATES                          |  
   - STATIC                             |
   - TEST                               | 
   __init__.py                          | 
   main.py                              |
   .....                                |

Правильно

FLASK-PROJECT (имя репозитория)  
  \                                     |
   - TEMPLATES                          |  
   - STATIC                             |
   - TEST                               | 
   __init__.py                          | 
   main.py                              |
   .....                                |
	 
2. Создаем учетную запись на HEROKU

3. Создаем новое приложение: NEW->Create new app

4. Выбираем для него имя и регион

5. В разделе DEPLOY выбираем Deploymet method: GitHub

6. После этого, здесь же, в разделе DEPLOY станет доступным подраздел App connected to GitHub: 
указываем к какой учетной записи, какому репозиторию на GitHub и какой ветке в репозитории мы привязываем приложение.
После этого все изменения в репозитории, в указанной ветке будут автоматически вызывать сборку новой версии приложения.

7. В разеделе Resources выбираем добавить free addon - Heroku Postgres. Это сервис доступак облачной базе данных, принадлежащей Heroku. 
Откроется новое окно настроек Postgres. 
Нам нужна беcплатная версия, потому указываем, что мы используем базу для хобби-разработки: PLAN hobby-dev

8. Разделе Settings для Heroku Postgres ищем DataBase credentials, из него копируем:
 HOST
 DATABASE
 USER
 PORT
 PASSWORD 
Они пригодятся нам при создании переменных среды, необходимых для запуска приложения.

9. Возвращаемся из конфигуратора Heroku Postgres к основному окну нашего приложения. 
В разделе Settings выбираем Reveal Config vars. Здесь устанавливаем основные переменные, 
необходимые для запуска нашего приложения. В нашем случае это FLASK_APP, DB_HOST, DB_PASSWORD, DB_USERNAME, DATA_BASE.
FLASK_APP  = main.py:init_app(), остальным переменным присваиваем соответствующие значения 
из Heroku Postgres Database credentials (см. п. 8 инструкции)

10. Для запуска приложения Heroku использует файл Procfile, который мы храним в корневой папке нашего 
репозитория на Github. В нешем случае, мы должны стартовать web сервис, используя flask сервер. Мы стартуем его 
на localhost сервера, но при этом используем не стандартный порт 5000, а порт выделенный сервером - 
хранится в системной переменной $PORT 

Содержание файла Procfile

web: env FLASK_ENV=development flask run -h 0.0.0.0 -p $PORT

11. Теперь можем проверить, как собирается и стартует наше приложение. В разделе Overview, в правой его части, 
есть лента событий, где отображаеются статусы нашего приложения (Build , Deployment). 
Если Buil на данный момент в процессе, то по щелчку мышки на строке статуса, 
мы попадаем в консоль сборки приложения и можем следить за процессом онлайн.

12. Если необходимо разобраться с ошибками, либо проверить текущий статус приложения, 
то переходим по кнопкам: More->View Logs.

13. В этом счастливом пункте, расскажу, какие сложности могут ожидать на пути сборки приложения:
 	- Есть лимиты на размер SLUG - активной части приложения, которая загружается в память при старте. 
          Этот лимит = 500 мб
   	  Если приложение не помещается влимит, нужно проанализировать, что лишнего в requirements, что можно не включать в сборку приложения 
          (возмиожно у вас объемные static файлы). Такие файлы заносим в .slugignore файл
        
        - Есть лимиты на размер приложения в памяти в ходе исполнения приложений. В лучае, если вы поместились
          по slug но не проходите по ограничению используемой памяти (500 мб),
          нужно смотреть на эффективность использования памяти:
          1. Уйти от bulk import, импортировать только необходимые объекты из пакетов.
          2. Вместо загрузки в память списков тяжелых объектов, работать с генераторами
          3. При работе с базой, максимум фильтров выполнять именно на уровне базы данных, оптимиизировать запросы
          4. Контролировать (минимизировать) количество процессов (threads) в памяти.  	
	  
        	
    В любом случае все ошибки ищем в логах, поиск решений начинаем с документации Heroku, заканчиваем на Stack Overflow.	 		  	